.\" Automatically generated by Pod::Man 2.26 (Pod::Simple 3.22)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Dist::Zilla::Plugin::MetaData::BuiltWith 3"
.TH Dist::Zilla::Plugin::MetaData::BuiltWith 3 "2012-07-29" "perl v5.16.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dist::Zilla::Plugin::MetaData::BuiltWith \- Report what versions of things your distribution was built against
.SH "VERSION"
.IX Header "VERSION"
version 0.03000100
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&  [MetaData::BuiltWith]
\&  include = Some::Module::Thats::Not::In::Preq
\&  exclude = Some::Module::Youre::Ashamed::Of
\&  show_uname = 1           ; default is 0
\&  show_config = 1          ; default is 0
\&  uname_call = uname        ; the default
\&  uname_args = \-s \-r \-m \-p  ; the default is \-a
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Often, distribution authors get module dependencies wrong. So in such cases,
its handy to be able to see what version of various packages they built with.
.PP
Some would prefer to demand everyone install the same version as they did,
but that's also not always necessary.
.PP
Hopefully, the existence of the metadata provided by this module will help
users on their end machines make intelligent choices about what modules to
install in the event of a problem.
.SH "OPTIONS"
.IX Header "OPTIONS"
.SS "exclude"
.IX Subsection "exclude"
Specify modules to exclude from version reporting
.PP
.Vb 2
\&    exclude = Foo
\&    exclude = Bar
.Ve
.SS "include"
.IX Subsection "include"
Specify additional modules to include the version of
.PP
.Vb 2
\&    include = Foo
\&    include = Bar
.Ve
.SS "show_config"
.IX Subsection "show_config"
Report \*(L"interesting\*(R" values from \f(CW%Config::Config\fR
.PP
.Vb 1
\&    show_config = 1 ; Boolean
.Ve
.SS "show_uname"
.IX Subsection "show_uname"
Report the output from \f(CW\*(C`uname\*(C'\fR
.PP
.Vb 1
\&    show_uname = 1 ; Boolean
.Ve
.SS "uname_call"
.IX Subsection "uname_call"
Specify what the system \f(CW\*(C`uname\*(C'\fR function is called
.PP
.Vb 1
\&    uname_call = uname ; String
.Ve
.SS "uname_args"
.IX Subsection "uname_args"
Specify arguments passed to the \f(CW\*(C`uname\*(C'\fR call.
.PP
.Vb 1
\&    uname_args = \-a ; String
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "mvp_multivalue_args"
.IX Subsection "mvp_multivalue_args"
This module can take, as parameters, any volume of 'exclude' or 'include' arguments.
.SS "metadata"
.IX Subsection "metadata"
This module scrapes together the name of all modules that exist in the "\f(CW\*(C`Prereqs\*(C'\fR" section
that Dist::Zilla collects, and then works out what version of things you have,
applies the various include/exclude rules, and ships that data back to Dist::Zilla
via this method. See \f(CW\*(C`Dist::Zilla\*(C'\fR's \f(CW\*(C`MetaProvider\*(C'\fR role for more details.
.ie n .SH "EXAMPLE OUTPUT ( ""META.json"" )"
.el .SH "EXAMPLE OUTPUT ( \f(CWMETA.json\fP )"
.IX Header "EXAMPLE OUTPUT ( META.json )"
.Vb 12
\&    "x_BuiltWith" : {
\&       "modules" : {
\&          "Dist::Zilla::Role::MetaProvider" : "4.101612",
\&          "File::Find" : "1.15",
\&          "File::Temp" : "0.22",
\&          "Module::Build" : "0.3607",
\&          "Moose" : "1.07",
\&          "Test::More" : "0.94"
\&       },
\&       "perl" : "5.012000",
\&       "platform" : "MSWin32"
\&    },
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Kent Fredric <kentnl@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by Kent Fredric <kentnl@cpan.org>.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
